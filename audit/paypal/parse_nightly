#!/usr/bin/env python

import os, os.path
import re
import shutil
from process.log import Logger as log
from process.globals import load_config
from process.globals import get_config
import process.lock as lock

import TrrFile, SarFile

filename_re = r'''^(?x)
    (?P<type>[A-Z]{3})-
    (?P<date>[0-9]{8})[.]
    (?P<sequence>[0-9]{2})[.]
    (?P<version>[0-9]{3})[.]
    CSV
    $
'''

handlers = {
    'TRR': TrrFile.TrrFile.handle,
    'SAR': SarFile.SarFile.handle,
}

def parse(path):
    filename = os.path.basename(path)
    matches = re.match(filename_re, filename)
    if matches:
        filetype = matches.group('type')
        if filetype in handlers:
            log.info("Parsing file {path} using {type} handler".format(path=path, type=filetype))
            handlers[filetype](path)
        else:
            log.info("No handler for type {type}".format(type=filetype))
    else:
        log.error("Could not parse filename: {filename}".format(filename=filename))

def archive(path):
    filename = os.path.basename(path)
    config = get_config()
    dest_path = os.path.join(config.archive_path, filename)

    log.info("Archiving {orig} to {new}".format(orig=path, new=dest_path))
    if os.path.exists(dest_path):
        raise Exception("Failed to archive file because destination path already exists: " + dest_path)
    shutil.move(path, dest_path)

if __name__ == '__main__':
    config = load_config("paypal-audit")
    lock.begin()

    for filename in os.listdir(config.incoming_path):
        path = os.path.join(config.incoming_path, filename)
        if os.path.isfile(path):
            parse(path)
            archive(path)

    lock.end()
